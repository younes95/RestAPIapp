{"version":3,"sources":["../src/asn1.js"],"names":["fromBER","compareSchema","verifySchema","fromJSON","powers2","Uint8Array","digitsString","LocalBaseBlock","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","constructor","byteLength","LocalHexBlock","isHexOnly","valueHex","inputBuffer","inputOffset","inputLength","intBuffer","length","push","sizeOnly","object","ex","BaseClass","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","LocalValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","idBlockBuf","toBER","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","toJSON","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","LocalIntegerValueBlock","valueDec","expectedLength","_valueHex","updatedValueHex","updatedView","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","_value","_valueDec","Integer","otherValue","integer","toDER","fromDER","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","toString","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","buffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Date","UTC","parser","parserArray","exec","outputArray","Array","join","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","valueOf","Error","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","newASN1Type","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","json"],"mappings":"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","file":"asn1.js","sourcesContent":["/* eslint-disable indent */\r\n/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\r\n//**************************************************************************************\r\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, utilConcatView } from \"pvutils\";\r\n//**************************************************************************************\r\n//region Declaration of global variables\r\n//**************************************************************************************\r\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration for \"LocalBaseBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\r\nclass LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {number} blockLength\r\n\t\t */\r\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\r\n\t\t/**\r\n\t\t * @type {string} error\r\n\t\t */\r\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\r\n\t\t/**\r\n\t\t * @type {Array.<string>} warnings\r\n\t\t */\r\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer} valueBeforeDecode\r\n\t\t */\r\n\t\tif(\"valueBeforeDecode\" in parameters)\r\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"baseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tblockName: this.constructor.blockName(),\r\n\t\t\tblockLength: this.blockLength,\r\n\t\t\terror: this.error,\r\n\t\t\twarnings: this.warnings,\r\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Description for \"LocalHexBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef LocalHexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\r\n//noinspection JSUnusedLocalSymbols\r\nconst LocalHexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalHexBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t */\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"hexBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isHexOnly !== true)\r\n\t\t{\r\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\r\n\t\t\treturn new ArrayBuffer(0);\r\n\t\t}\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n};\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of identification block class\r\n//**************************************************************************************\r\nclass LocalIdentificationBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [idBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"idBlock\" in parameters)\r\n\t\t{\r\n\t\t\t//region Properties from hexBlock class\r\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\r\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\r\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\r\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.tagClass = (-1);\r\n\t\t\tthis.tagNumber = (-1);\r\n\t\t\tthis.isConstructed = false;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"identificationBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet firstOctet = 0;\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tswitch(this.tagClass)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tif(this.isConstructed)\r\n\t\t\tfirstOctet |= 0x20;\r\n\r\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tlet number = this.tagNumber;\r\n\t\t\t\tnumber &= 0x1F;\r\n\t\t\t\tfirstOctet |= number;\r\n\r\n\t\t\t\tretView[0] = firstOctet;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.isHexOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tconst size = encodedBuf.byteLength;\r\n\r\n\t\t\tretBuf = new ArrayBuffer(size + 1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\r\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\r\n\r\n\t\t\t\tretView[size] = encodedView[size - 1];\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\r\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag class\r\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\r\n\r\n\t\tswitch(tagClassMask)\r\n\t\t{\r\n\t\t\tcase 0x00:\r\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x40:\r\n\t\t\t\tthis.tagClass = (2); // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x80:\r\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0xC0:\r\n\t\t\t\tthis.tagClass = (4); // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find it's constructed or not\r\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag number\r\n\t\tthis.isHexOnly = false;\r\n\r\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\r\n\r\n\t\t//region Simple case (tag number < 31)\r\n\t\tif(tagNumberMask !== 0x1F)\r\n\t\t{\r\n\t\t\tthis.tagNumber = (tagNumberMask);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Tag number bigger or equal to 31\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet count = 1;\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(255);\r\n\t\t\tlet tagNumberBufferMaxLength = 255;\r\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\r\n\t\t\t//noinspection JSBitwiseOperatorUsage\r\n\t\t\twhile(intBuffer[count] & 0x80)\r\n\t\t\t{\r\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count >= intBuffer.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\r\n\t\t\t\tif(count === tagNumberBufferMaxLength)\r\n\t\t\t\t{\r\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\r\n\r\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\r\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\r\n\t\t\tthis.blockLength = (count + 1);\r\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\r\n\r\n\t\t\t//region Cut buffer\r\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\r\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\tfor(let i = 0; i < count; i++)\r\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(count);\r\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\tintTagNumberBuffer.set(tempBufferView);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Try to convert long tag number to short form\r\n\t\t\tif(this.blockLength <= 9)\r\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.isHexOnly = true;\r\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Check if constructed encoding was using for primitive type\r\n\t\tif(((this.tagClass === 1)) &&\r\n\t\t\t(this.isConstructed))\r\n\t\t{\r\n\t\t\tswitch(this.tagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:  // Boolean\r\n\t\t\t\tcase 2:  // REAL\r\n\t\t\t\tcase 5:  // Null\r\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\r\n\t\t\t\tcase 9:  // REAL\r\n\t\t\t\tcase 14: // Time\r\n\t\t\t\tcase 23:\r\n\t\t\t\tcase 24:\r\n\t\t\t\tcase 31:\r\n\t\t\t\tcase 32:\r\n\t\t\t\tcase 33:\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string,\r\n\t *  tagClass: number,\r\n\t *  tagNumber: number,\r\n\t *  isConstructed: boolean,\r\n\t *  isHexOnly: boolean,\r\n\t *  valueHex: ArrayBuffer,\r\n\t *  blockLength: number,\r\n\t *  error: string, warnings: Array.<string>,\r\n\t *  valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.tagClass = this.tagClass;\r\n\t\tobject.tagNumber = this.tagNumber;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of length block class\r\n//**************************************************************************************\r\nclass LocalLengthBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalLengthBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [lenBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"lenBlock\" in parameters)\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\r\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\r\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = false;\r\n\t\t\tthis.longFormUsed = false;\r\n\t\t\tthis.length = 0;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"lengthBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(intBuffer[0] === 0xFF)\r\n\t\t{\r\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check for length form type\r\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of indefinite length form\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check is long form of length encoding using\r\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of short form of length value\r\n\t\tif(this.longFormUsed === false)\r\n\t\t{\r\n\t\t\tthis.length = (intBuffer[0]);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate length value in case of long form\r\n\t\tconst count = intBuffer[0] & 0x7F;\r\n\r\n\t\tif(count > 8) // Too big length value\r\n\t\t{\r\n\t\t\tthis.error = \"Too big integer\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif((count + 1) > intBuffer.length)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tconst lengthBufferView = new Uint8Array(count);\r\n\r\n\t\tfor(let i = 0; i < count; i++)\r\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\r\n\r\n\t\tif(lengthBufferView[count - 1] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\r\n\r\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\r\n\r\n\t\tif(this.longFormUsed && (this.length <= 127))\r\n\t\t\tthis.warnings.push(\"Unneccesary usage of long length form\");\r\n\r\n\t\tthis.blockLength = count + 1;\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.length > 127)\r\n\t\t\tthis.longFormUsed = true;\r\n\r\n\t\tif(this.isIndefiniteForm)\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\tretView[0] = 0x80;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.longFormUsed === true)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\r\n\r\n\t\t\tif(encodedBuf.byteLength > 127)\r\n\t\t\t{\r\n\t\t\t\tthis.error = \"Too big length\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn retBuf;\r\n\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\r\n\r\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\r\n\t\t\t\tretView[i + 1] = encodedView[i];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = this.length;\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.longFormUsed = this.longFormUsed;\r\n\t\tobject.length = this.length;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of value block class\r\n//**************************************************************************************\r\nclass LocalValueBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"valueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic ASN.1 block class\r\n//**************************************************************************************\r\nexport class BaseBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [primitiveSchema]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t * @param valueBlockType Type of value block\r\n\t */\r\n\tconstructor(parameters = {}, valueBlockType = LocalValueBlock)\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"name\" in parameters)\r\n\t\t\tthis.name = parameters.name;\r\n\t\tif(\"optional\" in parameters)\r\n\t\t\tthis.optional = parameters.optional;\r\n\t\tif(\"primitiveSchema\" in parameters)\r\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\r\n\r\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\r\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\r\n\t\tthis.valueBlock = new valueBlockType(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BaseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf;\r\n\r\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\r\n\r\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\r\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n\r\n\t\tretBuf = utilConcatBuf(idBlockBuf, lenBlockBuf);\r\n\r\n\t\tlet valueBlockBuf;\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n\t\telse\r\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\r\n\r\n\t\tretBuf = utilConcatBuf(retBuf, valueBlockBuf);\r\n\r\n\t\tif(this.lenBlock.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tconst indefBuf = new ArrayBuffer(2);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\r\n\r\n\t\t\t\tindefView[0] = 0x00;\r\n\t\t\t\tindefView[1] = 0x00;\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, indefBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.idBlock = this.idBlock.toJSON();\r\n\t\tobject.lenBlock = this.lenBlock.toJSON();\r\n\t\tobject.valueBlock = this.valueBlock.toJSON();\r\n\r\n\t\tif(\"name\" in this)\r\n\t\t\tobject.name = this.name;\r\n\t\tif(\"optional\" in this)\r\n\t\t\tobject.optional = this.optional;\r\n\t\tif(\"primitiveSchema\" in this)\r\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all PRIMITIVE types\r\n//**************************************************************************************\r\nclass LocalPrimitiveValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t//region Variables from \"hexBlock\" class\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer into internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tvalueHexView[i] = intBuffer[i];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrimitiveValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Primitive extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Primitive\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PRIMITIVE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all CONSTRUCTED types\r\n//**************************************************************************************\r\nclass LocalConstructedValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalConstructedValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Store initial offset and length\r\n\t\tconst initialOffset = inputOffset;\r\n\t\tconst initialLength = inputLength;\r\n\t\t//endregion\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Aux function\r\n\t\tfunction checkLen(indefiniteLength, length)\r\n\t\t{\r\n\t\t\tif(indefiniteLength === true)\r\n\t\t\t\treturn 1;\r\n\r\n\t\t\treturn length;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tlet currentOffset = inputOffset;\r\n\r\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\r\n\t\t{\r\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\r\n\t\t\tif(returnObject.offset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.error = returnObject.result.error;\r\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\r\n\t\t\tcurrentOffset = returnObject.offset;\r\n\r\n\t\t\tthis.blockLength += returnObject.result.blockLength;\r\n\t\t\tinputLength -= returnObject.result.blockLength;\r\n\r\n\t\t\tthis.value.push(returnObject.result);\r\n\r\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\r\n\t\t\t\tthis.value.pop();\r\n\t\t\telse\r\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\r\n\t\t}\r\n\r\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\r\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\r\n\t\t//endregion\r\n\r\n\t\treturn currentOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ConstructedValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.value = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.value.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Constructed extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Constructed\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalConstructedValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CONSTRUCTED\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 EndOfContent type class\r\n//**************************************************************************************\r\nclass LocalEndOfContentValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\r\n\t\treturn inputOffset;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContentValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class EndOfContent extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\tconstructor(paramaters = {})\r\n\t{\r\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContent\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Boolean type class\r\n//**************************************************************************************\r\nclass LocalBooleanValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBooleanValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t\t\r\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.valueHex = new ArrayBuffer(1);\r\n\t\t\tif(this.value === true)\r\n\t\t\t{\r\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\t\t\tview[0] = 0xFF;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\tif(inputLength > 1)\r\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n\r\n\t\tthis.isHexOnly = true;\r\n\r\n\t\t//region Copy input buffer to internal array\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tview[i] = intBuffer[i];\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(utilDecodeTC.call(this) !== 0 )\r\n\t\t\tthis.value = true;\r\n\t\telse\r\n\t\t\tthis.value = false;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BooleanValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Boolean extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Boolean\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBooleanValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 1; // Boolean\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Boolean\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Sequence and Set type classes\r\n//**************************************************************************************\r\nexport class Sequence extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Sequence\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 16; // Sequence\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Sequence\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Set extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Set\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 17; // Set\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Set\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Null type class\r\n//**************************************************************************************\r\nexport class Null extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Null\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 5; // Null\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Null\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(this.lenBlock.length > 0)\r\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\t\t\r\n\t\tthis.blockLength += inputLength;\r\n\t\t\r\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tconst retBuf = new ArrayBuffer(2);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\t\tretView[0] = 0x05;\r\n\t\tretView[1] = 0x00;\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 OctetString type class\r\n//**************************************************************************************\r\nclass LocalOctetStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalOctetStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = 0;\r\n\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\r\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\tthis.blockLength = inputLength;\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tretBuf = this.valueHex.slice(0);\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class OctetString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"OctetString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalOctetStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 4; // OctetString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\t//region Ability to encode empty OCTET STRING\r\n\t\tif(inputLength === 0)\r\n\t\t{\r\n\t\t\tif(this.idBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Checking that two OCTETSTRINGs are equal\r\n\t * @param {OctetString} octetString\r\n\t */\r\n\tisEqual(octetString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((octetString instanceof OctetString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 BitString type class\r\n//**************************************************************************************\r\nclass LocalBitStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBitStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t\tthis.blockLength = this.valueHex.byteLength;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to decode zero-length BitString value\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tlet resultOffset = (-1);\r\n\r\n\t\t//region If the BISTRING supposed to be a constructed value\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== BitString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\r\n\t\t\t\tif(this.unusedBits > 7)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region If the BitString supposed to be a primitive value\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.unusedBits = intBuffer[0];\r\n\t\t\r\n\t\tif(this.unusedBits > 7)\r\n\t\t{\r\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\r\n\t\t\tview[i] = intBuffer[i + 1];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = intBuffer.length;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\r\n\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = this.unusedBits;\r\n\r\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\t\tretView[i + 1] = curView[i];\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.unusedBits = this.unusedBits;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class BitString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BitString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBitStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 3; // BitString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to encode empty BitString\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Checking that two BITSTRINGs are equal\r\n\t * @param {BitString} bitString\r\n\t */\r\n\tisEqual(bitString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((bitString instanceof BitString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Integer type class\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalValueBlock\r\n */\r\nclass LocalIntegerValueBlock extends LocalHexBlock(LocalValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalIntegerValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.valueDec = parameters.value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"valueHex\"\r\n\t * @param {ArrayBuffer} _value\r\n\t */\r\n\tset valueHex(_value)\r\n\t{\r\n\t\tthis._valueHex = _value.slice(0);\r\n\r\n\t\tif(_value.byteLength >= 4)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis._valueDec = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tif(_value.byteLength > 0)\r\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueHex\"\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\tget valueHex()\r\n\t{\r\n\t\treturn this._valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @param {number} _value\r\n\t */\r\n\tset valueDec(_value)\r\n\t{\r\n\t\tthis._valueDec = _value;\r\n\r\n\t\tthis.isHexOnly = false;\r\n\t\tthis._valueHex = utilEncodeTC(_value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @returns {number}\r\n\t */\r\n\tget valueDec()\r\n\t{\r\n\t\treturn this._valueDec;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from DER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\r\n\t{\r\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(offset === (-1))\r\n\t\t\treturn offset;\r\n\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\r\n\t\t{\r\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(expectedLength !== 0)\r\n\t\t\t{\r\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\r\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn offset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoDER(sizeOnly = false)\r\n\t{\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase ((view[0] & 0x80) !== 0):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView[0] = 0x00;\r\n\t\t\t\t\tupdatedView.set(view, 1);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn this.toBER(sizeOnly);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(resultOffset === (-1))\r\n\t\t\treturn resultOffset;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IntegerValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current value to decimal string representation\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\t//region Aux functions\r\n\t\tfunction viewAdd(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value = 0;\r\n\t\t\t\r\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter < secondViewCopy.length):\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tc[0] = value / 10;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\r\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(c[0] > 0)\r\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice(0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction power2(n)\r\n\t\t{\r\n\t\t\tif(n >= powers2.length)\r\n\t\t\t{\r\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let i = (digits.length - 1); i >=0; i--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\r\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (c[0] > 0)\r\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpowers2.push(digits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn powers2[n];\r\n\t\t}\r\n\t\t\r\n\t\tfunction viewSub(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet b = 0;\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (value < 0):\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(b > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(value < 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice();\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\r\n\t\t\r\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\r\n\t\tlet bitNumber = 0;\r\n\t\tlet currentByte;\r\n\t\t\r\n\t\tconst asn1View = new Uint8Array(this._valueHex);\r\n\t\t\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tlet flag = false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Calculate number\r\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\r\n\t\t{\r\n\t\t\tcurrentByte = asn1View[byteNumber];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < 8; i++)\r\n\t\t\t{\r\n\t\t\t\tif((currentByte & 1) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(bitNumber)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase firstBit:\r\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\r\n\t\t\t\t\t\t\tresult = \"-\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbitNumber++;\r\n\t\t\t\tcurrentByte >>= 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Print number\r\n\t\tfor(let i = 0; i < digits.length; i++)\r\n\t\t{\r\n\t\t\tif(digits[i])\r\n\t\t\t\tflag = true;\r\n\t\t\t\r\n\t\t\tif(flag)\r\n\t\t\t\tresult += digitsString.charAt(digits[i]);\r\n\t\t}\r\n\t\t\r\n\t\tif(flag === false)\r\n\t\t\tresult += digitsString.charAt(0);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Integer extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Integer\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalIntegerValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 2; // Integer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Integer\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\r\n\t * @param {!Integer|ArrayBuffer} otherValue\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(otherValue)\r\n\t{\r\n\t\tif(otherValue instanceof Integer)\r\n\t\t{\r\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\r\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\r\n\r\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\r\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif(otherValue instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from BER into DER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertToDER()\r\n\t{\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.toDER();\r\n\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from DER to BER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertFromDER()\r\n\t{\r\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\r\n\t\t\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Enumerated type class\r\n//**************************************************************************************\r\nexport class Enumerated extends Integer\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Enumerated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Enumerated\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 ObjectIdentifier type class\r\n//**************************************************************************************\r\nclass LocalSidValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSidValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {number} [valueDec]\r\n\t * @property {boolean} [isFirstSid]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\r\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"sidBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\r\n\t\tlet view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < inputLength; i++)\r\n\t\t{\r\n\t\t\tview[i] = intBuffer[i] & 0x7F;\r\n\r\n\t\t\tthis.blockLength++;\r\n\r\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//region Ajust size of valueHex buffer\r\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\r\n\t\tconst tempView = new Uint8Array(tempValueHex);\r\n\r\n\t\tfor(let i = 0; i < this.blockLength; i++)\r\n\t\t\ttempView[i] = view[i];\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tthis.valueHex = tempValueHex.slice(0);\r\n\t\tview = new Uint8Array(this.valueHex);\r\n\t\t//endregion\r\n\r\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(view[0] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n\t\tif(this.blockLength <= 8)\r\n\t\t\tthis.valueDec = utilFromBase(view, 7);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\r\n\t\t}\r\n\r\n\t\treturn (inputOffset + this.blockLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.isHexOnly)\r\n\t\t{\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\r\n\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\r\n\t\t\t\tretView[i] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\r\n\t\tif(encodedBuf.byteLength === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Error during encoding SID value\";\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\r\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\r\n\r\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create string representation of current SID block\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\r\n\t\tif(this.isHexOnly === true)\r\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.isFirstSid)\r\n\t\t\t{\r\n\t\t\t\tlet sidValue = this.valueDec;\r\n\r\n\t\t\t\tif(this.valueDec <= 39)\r\n\t\t\t\t\tresult = \"0.\";\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.valueDec <= 79)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"1.\";\r\n\t\t\t\t\t\tsidValue -= 40;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"2.\";\r\n\t\t\t\t\t\tsidValue -= 80;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += sidValue.toString();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = this.valueDec.toString();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\t\tobject.isFirstSid = this.isFirstSid;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalObjectIdentifierValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = inputOffset;\r\n\r\n\t\twhile(inputLength > 0)\r\n\t\t{\r\n\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.blockLength = 0;\r\n\t\t\t\tthis.error = sidBlock.error;\r\n\t\t\t\treturn resultOffset;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.value.length === 0)\r\n\t\t\t\tsidBlock.isFirstSid = true;\r\n\r\n\t\t\tthis.blockLength += sidBlock.blockLength;\r\n\t\t\tinputLength -= sidBlock.blockLength;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tif(valueBuf.byteLength === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.error = this.value[i].error;\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n\t * @param {string} string Input string to convert from\r\n\t * @returns {boolean}\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tthis.value = []; // Clear existing SID values\r\n\r\n\t\tlet pos1 = 0;\r\n\t\tlet pos2 = 0;\r\n\r\n\t\tlet sid = \"\";\r\n\r\n\t\tlet flag = false;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tpos2 = string.indexOf(\".\", pos1);\r\n\t\t\tif(pos2 === (-1))\r\n\t\t\t\tsid = string.substr(pos1);\r\n\t\t\telse\r\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\r\n\r\n\t\t\tpos1 = pos2 + 1;\r\n\r\n\t\t\tif(flag)\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = this.value[0];\r\n\r\n\t\t\t\tlet plus = 0;\r\n\r\n\t\t\t\tswitch(sidBlock.valueDec)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tplus = 40;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplus = 80;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.value = []; // clear SID array\r\n\t\t\t\t\t\treturn false; // ???\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(parsedSID))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\r\n\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(sidBlock.valueDec))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tif(this.value.length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tsidBlock.isFirstSid = true;\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.value.push(sidBlock);\r\n\t\t\t}\r\n\t\t} while(pos2 !== (-1));\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\tlet isHexOnly = false;\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tisHexOnly = this.value[i].isHexOnly;\r\n\r\n\t\t\tlet sidStr = this.value[i].toString();\r\n\r\n\t\t\tif(i !== 0)\r\n\t\t\t\tresult = `${result}.`;\r\n\r\n\t\t\tif(isHexOnly)\r\n\t\t\t{\r\n\t\t\t\tsidStr = `{${sidStr}}`;\r\n\r\n\t\t\t\tif(this.value[i].isFirstSid)\r\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\r\n\t\t\t\telse\r\n\t\t\t\t\tresult += sidStr;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult += sidStr;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifierValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.toString();\r\n\t\tobject.sidArray = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class ObjectIdentifier extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"ObjectIdentifier\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifier\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all string's classes\r\n//**************************************************************************************\r\nclass LocalUtf8StringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8StringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class Utf8String extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Utf8String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8String\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//noinspection JSDeprecatedSymbols\r\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//noinspection JSDeprecatedSymbols\r\n\t\tconst str = unescape(encodeURIComponent(inputString));\r\n\t\tconst strLen = str.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalBaseBlock\r\n * @extends LocalHexBlock\r\n */\r\nclass LocalBmpStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBmpStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class BmpString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BmpString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBmpStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 30; // BmpString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 2)\r\n\t\t{\r\n\t\t\tconst temp = valueView[i];\r\n\r\n\t\t\tvalueView[i] = valueView[i + 1];\r\n\t\t\tvalueView[i + 1] = temp;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 2)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 2 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalUniversalStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class UniversalString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UniversalString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 4)\r\n\t\t{\r\n\t\t\tvalueView[i] = valueView[i + 3];\r\n\t\t\tvalueView[i + 1] = valueView[i + 2];\r\n\t\t\tvalueView[i + 2] = 0x00;\r\n\t\t\tvalueView[i + 3] = 0x00;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 4)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 4 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalSimpleStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = \"\";\r\n\t\tthis.isHexOnly = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SimpleStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nclass LocalSimpleStringBlock extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SIMPLESTRING\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLen = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = inputString.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class NumericString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"NumericString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 18; // NumericString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"NumericString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class PrintableString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"PrintableString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrintableString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class TeletexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TeletexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TeletexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VideotexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VideotexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VideotexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class IA5String extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"IA5String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 22; // IA5String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IA5String\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GraphicString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GraphicString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GraphicString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VisibleString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VisibleString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VisibleString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GeneralString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class CharacterString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"CharacterString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CharacterString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all date and time classes\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class UTCTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UTCTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Parse input string\r\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n\t\tconst parserArray = parser.exec(inputString);\r\n\t\tif(parserArray === null)\r\n\t\t{\r\n\t\t\tthis.error = \"Wrong input string for convertion\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Store parsed values\r\n\t\tconst year = parseInt(parserArray[1], 10);\r\n\t\tif(year >= 50)\r\n\t\t\tthis.year = 1900 + year;\r\n\t\telse\r\n\t\t\tthis.year = 2000 + year;\r\n\r\n\t\tthis.month = parseInt(parserArray[2], 10);\r\n\t\tthis.day = parseInt(parserArray[3], 10);\r\n\t\tthis.hour = parseInt(parserArray[4], 10);\r\n\t\tthis.minute = parseInt(parserArray[5], 10);\r\n\t\tthis.second = parseInt(parserArray[6], 10);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = new Array(7);\r\n\r\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n\t\toutputArray[1] = padNumber(this.month, 2);\r\n\t\toutputArray[2] = padNumber(this.day, 2);\r\n\t\toutputArray[3] = padNumber(this.hour, 2);\r\n\t\toutputArray[4] = padNumber(this.minute, 2);\r\n\t\toutputArray[5] = padNumber(this.second, 2);\r\n\t\toutputArray[6] = \"Z\";\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UTCTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class GeneralizedTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralizedTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\t\tthis.millisecond = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet isUTC = false;\r\n\r\n\t\tlet timeString = \"\";\r\n\t\tlet dateTimeString = \"\";\r\n\t\tlet fractionPart = 0;\r\n\r\n\t\tlet parser;\r\n\r\n\t\tlet hourDifference = 0;\r\n\t\tlet minuteDifference = 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert as UTC time\r\n\t\tif(inputString[inputString.length - 1] === \"Z\")\r\n\t\t{\r\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\r\n\r\n\t\t\tisUTC = true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Convert as local time\r\n\t\telse\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\r\n\r\n\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\ttimeString = inputString;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\r\n\t\tif(isUTC)\r\n\t\t{\r\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Get \"UTC time difference\" in case of local time\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet multiplier = 1;\r\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\r\n\t\t\tlet differenceString = \"\";\r\n\r\n\t\t\tif(differencePosition === (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\r\n\t\t\t\tmultiplier = (-1);\r\n\t\t\t}\r\n\r\n\t\t\tif(differencePosition !== (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\r\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\r\n\r\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\r\n\r\n\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\thourDifference = multiplier * number;\r\n\r\n\t\t\t\tif(differenceString.length === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\r\n\r\n\t\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t\tminuteDifference = multiplier * number;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get position of fraction point\r\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\r\n\t\tif(fractionPointPosition === (-1))\r\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\r\n\t\t//endregion\r\n\r\n\t\t//region Get fraction part\r\n\t\tif(fractionPointPosition !== (-1))\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\r\n\r\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tfractionPart = fractionPartCheck.valueOf();\r\n\r\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\r\n\t\t}\r\n\t\telse\r\n\t\t\tdateTimeString = timeString;\r\n\t\t//endregion\r\n\r\n\t\t//region Parse internal date\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Put parsed values at right places\r\n\t\tconst parserArray = parser.exec(dateTimeString);\r\n\t\tif(parserArray === null)\r\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\tfor(let j = 1; j < parserArray.length; j++)\r\n\t\t{\r\n\t\t\tswitch(j)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get final date\r\n\t\tif(isUTC === false)\r\n\t\t{\r\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\r\n\t\t\tthis.year = tempDate.getUTCFullYear();\r\n\t\t\tthis.month = tempDate.getUTCMonth();\r\n\t\t\tthis.day = tempDate.getUTCDay();\r\n\t\t\tthis.hour = tempDate.getUTCHours();\r\n\t\t\tthis.minute = tempDate.getUTCMinutes();\r\n\t\t\tthis.second = tempDate.getUTCSeconds();\r\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(padNumber(this.year, 4));\r\n\t\toutputArray.push(padNumber(this.month, 2));\r\n\t\toutputArray.push(padNumber(this.day, 2));\r\n\t\toutputArray.push(padNumber(this.hour, 2));\r\n\t\toutputArray.push(padNumber(this.minute, 2));\r\n\t\toutputArray.push(padNumber(this.second, 2));\r\n\t\tif(this.millisecond !== 0)\r\n\t\t{\r\n\t\t\toutputArray.push(\".\");\r\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\r\n\t\t}\r\n\t\toutputArray.push(\"Z\");\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralizedTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\t\tobject.millisecond = this.millisecond;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DATE extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DATE\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 31; // DATE\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DATE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TimeOfDay extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TimeOfDay\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TimeOfDay\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DateTime extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DateTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 33; // DateTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DateTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class Duration extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Duration\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 34; // Duration\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Duration\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TIME extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Time\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 14; // Time\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TIME\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Choice\r\n//**************************************************************************************\r\nexport class Choice\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Choice\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Any\r\n//**************************************************************************************\r\nexport class Any\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Any\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Repeated\r\n//**************************************************************************************\r\nexport class Repeated\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\r\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type RawData\r\n//**************************************************************************************\r\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\r\nexport class RawData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.data;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major ASN.1 BER decoding function\r\n//**************************************************************************************\r\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\r\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\r\n{\r\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\r\n\r\n\t//region Local function changing a type for ASN.1 classes\r\n\tfunction localChangeType(inputObject, newType)\r\n\t{\r\n\t\tif(inputObject instanceof newType)\r\n\t\t\treturn inputObject;\r\n\r\n\t\tconst newObject = new newType();\r\n\t\tnewObject.idBlock = inputObject.idBlock;\r\n\t\tnewObject.lenBlock = inputObject.lenBlock;\r\n\t\tnewObject.warnings = inputObject.warnings;\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\r\n\tlet returnObject = new BaseBlock({}, Object);\r\n\t//endregion\r\n\r\n\t//region Basic check for parameters\r\n\tif(checkBufferParams(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false)\r\n\t{\r\n\t\treturnObject.error = \"Wrong input parameters\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting Uint8Array from ArrayBuffer\r\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t//endregion\r\n\r\n\t//region Initial checks\r\n\tif(intBuffer.length === 0)\r\n\t{\r\n\t\tthis.error = \"Zero buffer length\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decode indentifcation block of ASN.1 BER structure\r\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.idBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.idBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Decode length block of ASN.1 BER structure\r\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.lenBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.lenBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Check for usign indefinite length form in encoding for primitive types\r\n\tif((returnObject.idBlock.isConstructed === false) &&\r\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\r\n\t{\r\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Switch ASN.1 block type\r\n\tlet newASN1Type = BaseBlock;\r\n\r\n\tswitch(returnObject.idBlock.tagClass)\r\n\t{\r\n\t\t//region UNIVERSAL\r\n\t\tcase 1:\r\n\t\t\t//region Check for reserved tag numbers\r\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\r\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\r\n\t\t\t{\r\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n\t\t\t\treturn {\r\n\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\tresult: returnObject\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(returnObject.idBlock.tagNumber)\r\n\t\t\t{\r\n\t\t\t\t//region EndOfContent type\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t//region Check for EndOfContent type\r\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\r\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tnewASN1Type = EndOfContent;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Boolean type\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tnewASN1Type = Boolean;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Integer type\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tnewASN1Type = Integer;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BitString type\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tnewASN1Type = BitString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OctetString type\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tnewASN1Type = OctetString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Null type\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tnewASN1Type = Null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OBJECT IDENTIFIER type\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Enumerated type\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tnewASN1Type = Enumerated;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Utf8String type\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tnewASN1Type = Utf8String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Time type\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tnewASN1Type = TIME;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region ASN.1 reserved type\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t};\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Sequence type\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tnewASN1Type = Sequence;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Set type\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tnewASN1Type = Set;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region NumericString type\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tnewASN1Type = NumericString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region PrintableString type\r\n\t\t\t\tcase 19:\r\n\t\t\t\t\tnewASN1Type = PrintableString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TeletexString type\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tnewASN1Type = TeletexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VideotexString type\r\n\t\t\t\tcase 21:\r\n\t\t\t\t\tnewASN1Type = VideotexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region IA5String type\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tnewASN1Type = IA5String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UTCTime type\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tnewASN1Type = UTCTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralizedTime type\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GraphicString type\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tnewASN1Type = GraphicString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VisibleString type\r\n\t\t\t\tcase 26:\r\n\t\t\t\t\tnewASN1Type = VisibleString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralString type\r\n\t\t\t\tcase 27:\r\n\t\t\t\t\tnewASN1Type = GeneralString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UniversalString type\r\n\t\t\t\tcase 28:\r\n\t\t\t\t\tnewASN1Type = UniversalString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region CharacterString type\r\n\t\t\t\tcase 29:\r\n\t\t\t\t\tnewASN1Type = CharacterString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BmpString type\r\n\t\t\t\tcase 30:\r\n\t\t\t\t\tnewASN1Type = BmpString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region DATE type\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tnewASN1Type = DATE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TimeOfDay type\r\n\t\t\t\tcase 32:\r\n\t\t\t\t\tnewASN1Type = TimeOfDay;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Date-Time type\r\n\t\t\t\tcase 33:\r\n\t\t\t\t\tnewASN1Type = DateTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Duration type\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tnewASN1Type = Duration;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region default\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet newObject;\r\n\r\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\t\t\tnewObject = new Constructed();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tnewObject = new Primitive();\r\n\r\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\r\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\r\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\r\n\r\n\t\t\t\t\t\treturnObject = newObject;\r\n\r\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t//endregion\r\n\t\t//region All other tag classes\r\n\t\tcase 2: // APPLICATION\r\n\t\tcase 3: // CONTEXT-SPECIFIC\r\n\t\tcase 4: // PRIVATE\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\tnewASN1Type = Constructed;\r\n\t\t\t\telse\r\n\t\t\t\t\tnewASN1Type = Primitive;\r\n\t\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Change type and perform BER decoding\r\n\treturnObject = localChangeType(returnObject, newASN1Type);\r\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\r\n\t//endregion\r\n\r\n\t//region Coping incoming buffer for entire ASN.1 block\r\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\r\n\t//endregion\r\n\r\n\treturn {\r\n\t\toffset: resultOffset,\r\n\t\tresult: returnObject\r\n\t};\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\r\nexport function fromBER(inputBuffer)\r\n{\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\tconst result = new BaseBlock({}, Object);\r\n\t\tresult.error = \"Input buffer has zero length\";\r\n\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult\r\n\t\t};\r\n\t}\r\n\r\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major scheme verification function\r\n//**************************************************************************************\r\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function compareSchema(root, inputData, inputSchema)\r\n{\r\n\t//region Special case for Choice schema element type\r\n\tif(inputSchema instanceof Choice)\r\n\t{\r\n\t\tconst choiceResult = false;\r\n\r\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\r\n\t\t{\r\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\r\n\t\t\tif(result.verified === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(choiceResult === false)\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: {\r\n\t\t\t\t\terror: \"Wrong values for Choice type\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t_result.name = inputSchema.name;\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Special case for Any schema element type\r\n\tif(inputSchema instanceof Any)\r\n\t{\r\n\t\t//region Add named component of ASN.1 schema\r\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t\t//endregion\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Initial check\r\n\tif((root instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong root object\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputData instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"idBlock\" in inputSchema) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\r\n\t//region Encode and decode ASN.1 schema idBlock\r\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\r\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"toBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst encodedId = inputSchema.idBlock.toBER(false);\r\n\tif(encodedId.byteLength === 0)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n\tif(decodedOffset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region tagClass\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region tagNumber\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isConstructed\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isHexOnly\r\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region valueHex\r\n\tif(inputSchema.idBlock.isHexOnly === true)\r\n\t{\r\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\r\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\r\n\r\n\t\tif(schemaView.length !== asn1View.length)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfor(let i = 0; i < schemaView.length; i++)\r\n\t\t{\r\n\t\t\tif(schemaView[i] !== asn1View[1])\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: false,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t//endregion\r\n\r\n\t//region Add named component of ASN.1 schema\r\n\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t{\r\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\tif(inputSchema.name !== \"\")\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting next ASN.1 block for comparition\r\n\tif(inputSchema.idBlock.isConstructed === true)\r\n\t{\r\n\t\tlet admission = 0;\r\n\t\tlet result = { verified: false };\r\n\r\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\r\n\r\n\t\tif(maxLength > 0)\r\n\t\t{\r\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\r\n\t\t}\r\n\r\n\t\t//region Special case when constructive value has no elements\r\n\t\tif(maxLength === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: true,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\r\n\t\tif((inputData.valueBlock.value.length === 0) &&\r\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\r\n\t\t{\r\n\t\t\tlet _optional = true;\r\n\r\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n\r\n\t\t\tif(_optional === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\troot.error = \"Inconsistent object length\";\r\n\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tfor(let i = 0; i < maxLength; i++)\r\n\t\t{\r\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\r\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\r\n\t\t\t{\r\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst _result = {\r\n\t\t\t\t\t\tverified: false,\r\n\t\t\t\t\t\tresult: root\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\r\n\r\n\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\treturn _result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\r\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet arrayRoot = {};\r\n\r\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\r\n\t\t\t\t\t\t\tarrayRoot = inputData;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tarrayRoot = root;\r\n\r\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n\r\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\r\n\tif((\"primitiveSchema\" in inputSchema) &&\r\n\t\t(\"valueHex\" in inputData.valueBlock))\r\n\t{\r\n\t\t//region Decoding of raw ASN.1 data\r\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: asn1.result\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n\t}\r\n\r\n\treturn {\r\n\t\tverified: true,\r\n\t\tresult: root\r\n\t};\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function verifySchema(inputBuffer, inputSchema)\r\n{\r\n\t//region Initial check\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decoding of raw ASN.1 data\r\n\tconst asn1 = fromBER(inputBuffer);\r\n\tif(asn1.offset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: asn1.result\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Compare ASN.1 struct with input schema\r\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major function converting JSON to ASN.1 objects\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\r\nexport function fromJSON(json)\r\n{\r\n\t// TODO Implement\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************"]}